#include "../directivasDeProcessamento/Bibliotecas.c"
typedef struct Tipo Tipo;
typedef struct ListaCodigo ListaCodigo;

void insert(ListaCodigo* topo, Tipo dadoToken);
void display(ListaCodigo* topo);
//==================================================================================

char lerCaractere();
void VoltarCaractere();
void zerarVetor();
Tipo analex(FILE *ficheiro);
//====================================================================================
void program(FILE* ficheiro);
void external_declaration();
void declaration_definition();
void declaration_definition1();
void declarator();
void declarator1();
void declaration();
void declaration1();
void init_declarator();
void function_definition();
void function_declaration();
void direct_declaration();
void declaration_specifier();
void storage_class_specifier();
void type_specifier();
void type_qualifier();
void struct_or_union_specifier();
void struct_or_union_specifier1();
void struct_or_union_specifier2();
void struct_fim();
void struct_or_union();
void struct_declaration();
void specifier_qualifier();
void struct_declaration_list();
void struct_declaration_list1();
void struct_declarator();
void struct_declarator1();
void constant_expression();
void conditional_expression();
void conditional_expression1();
void logical_or_expression();
void logical_or_expression1();
void logical_and_expression();
void logical_and_expression1();
void inclusive_or_expression();
void inclusive_or_expression1();
void exclusive_or_expression();
void exclusive_or_expression1();
void and_expression();
void and_expression1();
void equality_expression();
void equality_expression1();
void relational_expression();
void relational_expression1();
void shift_expression();
void shift_expression1();
void additive_expression();
void additive_expression1();
void multiplicative_expression();
void multiplicative_expression1();
void cast_expression();
void unary_expression();
void unary_expression1();
void postifix_expression();
void postifix_expression1();
void desp1();
void primary_expression();
void constant();
void expression();
void expression1();
void assignment_expression();
void assignment_operator();
void unary_operator();
void type_name();
void parameter_list();
void parameter_list1();
void parameter_list_id();
void parm1();
void abstract_declarator();
void abstract_declarator1();
void direct_abstract_declarator();
void direct_abstract_declarator1();
void enum_specifier();
void enum_specifier1();
void enum_specifier2();
void enumeration_list();
void enumeration_list1();
void enumerator();
void enumerator1();
void typedes_name();
void initializer();
void initializer1();
void initializer_list();
void initializer_list1();
void pointer();
void compound_statement();
void statement();
void labeled_statement();
void expression_statement();
void selection_statement();
void selection_statement1();
void iteration_statement();
void jump_statement();
void function_statement();
void function_compound();
