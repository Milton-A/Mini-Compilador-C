
<program>::={<external-declaration>}*
<external-declaration>::= <declaration-definition>

<declaration-definition>::= <declaration-specifier><declaration-definition><declaration-definition1>|ε
<declaration-definition1>::=<struct-or-union-specifier>| <declarator> 

<declarator>::={<pointer>}?"ID"<declarator1>
<declarator1>::= <function-definition> | <direct-declaration>

<declaration>::={<init-declarator>}*<declaration1>
<declaration1>";"|ε
<init-declarator>::="="<initializer> | ε
 
<function-definition>::=<function-declaration><compound-statement>
<function-declaration>::="("<parameter-list>")"

<direct-declaration>::="["{<constant-expression>}?"]"<direct-declarator> | <declaration>

<declaration-specifier>::=<storage-class-specifier>|<type-specifier>|<type-qualifier>|ε
<storage-class-specifier>::="auto"|"register"|"static"|"extern"|"typedef"|ε
<type-specifier>::="void"|"char"|"short"|"int"|"long"|"float"|"double"|"signed"|"unsigned"|<enum-specifier>|<typedef-name>
<type-qualifier>::="const"|"volatile"

<struct-or-union-specifier>::=<struct-or-union><struct-or-union-specifier1>
<struct-or-union-specifier1>::="ID"<struct-or-union-specifier2><struct-fim>|"{"{<struct-declaration>}+"}"<struct-fim>
<struct-or-union-specifier2>::="{"{<struct-declaration>}+"}"|ε
<struct-fim>::="ID"";"|";"

<struct-or-union>::="struct"|"union"
<struct-declaration>::={<specifier-qualifier>}* <struct-declaration-list>
<specifier-qualifier>::=<type-specifier>|<type-qualifier>
<struct-declaration-list>::=<struct-declarator><struct-declaration-list1>
<struct-declaration-list1>::=<struct-declarator><struct-declaration-list1>|ε

<struct-declarator>::=<declarator><struct-declarator1>|":"<constant-expression>
<struct-declarator1>::=":"<constant-expression>|ε

<constant-expression>::=<conditional-expression>
<conditional-expression>::=<logical-or-expression>|<conditional-expression1>
<conditional-expression1>::="?"<expression>":"<conditional-expression1>|ε

<logical-or-expression>::=<logical-and-expression>|<logical-or-expression1>
<logical-or-expression1>::="||"<logical-and-expression><logical-or-expression1>|ε

<logical-and-expression>::=<inclusive-or-expression>|<logical-and-expression1>
<logical-and-expression1>::="&&"<inclusive-or-expression><logical-and-expression1>|ε

<inclusive-or-expression>::=<exclusive-or-expression>|<inclusive-or-expression1>
<inclusive-or-expression1>::="|"<exclusive-or-expression><inclusive-or-expression1>|ε

<exclusive-or-expression>::=<and-expression>|<exclusive-or-expression1>
<exclusive-or-expression1>::="^"<and-expression><exclusive-or-expression1>|ε

<and-expression>::=<equality-expression>|<and-expression1>
<and-expression1>::="&"<equality-expression><and-expression1>|ε

<equality-expression>::=<relational-expression>|<equality-expression1>
<equality-expression1>::="=="<relational-expression><equality-expression1>
                        |"!="<relational-expression><equality-expression1>|ε

<relational-expression>::=<shift-expression>|<relational-expression1>
<relational-expression1>::="<"<shift-expression><relational-expression1>
                        |">"<shift-expression><relational-expression1>
                        |"<="<shift-expression><relational-expression1>
                        |">="<shift-expression><relational-expression1>|ε
<shift-expression>::=<additive-expression>|<shift-expression1>
<shift-expression1>::=  "<<"<additive-expression><shift-expression1>
                        |">>"<additive-expression><shift-expression1>|ε

<additive-expression>::=<multiplicative-expression>|<additive-expression1>
<additive-expression1>::="+"<multiplicative-expression><additive-expression1>
                        |"-"<multiplicative-expression><additive-expression1>|ε

<multiplicative-expression>::=<cast-expression>|<multiplicative-expression1>
<multiplicative-expression1>::="*"<cast-expression><multiplicative-expression1>
                        |"/"<cast-expression><multiplicative-expression1>
                        |"%"<cast-expression><multiplicative-expression1>|ε

    <cast-expression>::=<unary-expression><cast-expression>|ε

    <unary-expression>::=<postfix-expression>|"++"<unary-expression>|"--"<unary-expression>
                            |<unary-operator> <cast-expression>|"sizeof" <unary-expression1>
    <unary-expression1>::=<unary-expression>|<type-name>

    <postfix-expression>::=<primary-expression>|<postfix-expression1>
    <postfix-expression1>::="["<expression>"]"<postfix-expression1>
                            |"("<desp1>
                            |"." "ID"<postfix-expression1>
                            |"->" "ID"<postfix-expression1>
                            |"++"<postfix-expression1>
                            |"--"<postfix-expression1>|ε
    <desp1>::={<expression>}*")"<expression>|<type-name>")"|ε

    <primary-expression>::="ID" | <constant>|<string>
    <constant>::= <integer-constant> | <character-constant> | <floating-constant> | <enumeration-constant>
    <expression>::=<assignment-expression><expression1>
    <expression1>::=","<assignment-expression><expression1>|ε

<assignment-expression>::=<conditional-expression>|<unary-expression> <assignment-operator> <assignment-expression>
<assignment-operator>::= "="|"*="|"/="|"%="|"+="|"-="|"<<="|">>="|"&="|"^="|"|="
<unary-operator>::="&"|"*"|"+"|"-"|"~"|"!"

<type-name> ::= {<specifier-qualifier>}+{<abstract-declarator>}?
<parameter-list>::=<declaration-definition><parameter-list1>|ε|<parameter-list-id>
<parameter-list1>::=ε|","<declaration-definition><parameter-list1>
<parameter-list-id>::="ID"<parm1>|ε
<parm1>::= ",""ID"<parm1>|ε
<abstract-declarator>::=<pointer><abstract-declarator1>|<direct-abstract-declarator>
<abstract-declarator1>::=<direct-abstract-declarator>|ε

<direct-abstract-declarator>::="("<abstract-declarator>")"|<direct-abstract-declarator1>
<direct-abstract-declarator1>::="["{<constant-expression>}?"]"<direct-abstract-declarator1>?
                        |"("{parameter-type-list}?")"<direct-abstract-declarator1>?

<enum-specifier>::="enum"<enum-specifier1>
<enum-specifier1>::="ID"<enum-specifier2>|"{"<enumeration-list>"}"
<enum-specifier2>::="{"<enumeration-list>"}"|ε

<enumeration-list>::=<enumerator><enumeration-list1>
<enumeration-list1>::=","<enumerator><enumeration-list1>|ε

<enumerator>::="ID"<enumerator1>
<enumerator1>::="="<constant-expression>|ε

<typedef-name> ::= "ID"

<initializer>::=<assignment-expression> | <initializer-list> <initializer1>
<initializer1>::=",""}"|"}"

<initializer-list>::=<initializer><initializer-list1>
<initializer-list1>::=","<initializer><initializer-list1>|ε

<pointer>::="*"{<type-qualifier>}* {<pointer>}?

<compound-statement>::="{"{<declaration-definition>}*{<statement>}*"}"
<statement>::=<labeled-statement>|<expression-statement>|<compound-statement>|<selection-statement>
                |<iteration-statement>|<jump-statement>|<function-statement>

<labeled-statement>::="ID" ":" <statement> | "case" <constant-expression>":"<statement>|"default" ":"<statement>
<expression-statement>::={<expression>}? ";"
<selection-statement>::="if""("<expression>")"<statement> <selection-statement1>|"switch" "("<expression>")"<statement>
<selection-statement1>::=ε|"else" <statement> 

<iteration-statement>::="while" "("<expression>")"<statement> | "do" <statement> "while" "("<expression>")" ";"
                        |"for" "("{<expression>}?";"{<expression>}?";"{<expression>}?")" <statement>
<jump-statement>::="goto""ID" ";" | "continue" ";" | "break" ";" |"return" {<expression>}?";"
<function-statement>::="printf"<function-compound>|"scanf"<function-compound>|"free"<function-compound>
                        "strcpy"<function-compound>|"malloc"<function-compound>|"gets"<function-compound>
                        |"putchar"<function-compound>|"getchar"<function-compound>|"fgets"<function-compound>
                        |"calloc"<function-compound>|"realloc"<function-compound>|"ID"<function-compound>
<function-compound>::="("<expression>")"";"
