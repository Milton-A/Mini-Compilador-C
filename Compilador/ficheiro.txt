#include "header.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Estrutura para armazenar as informações de um documento
typedef struct Documento {
    int ID;
    double* pontuacoes;
    Arm* P_Armario;
    Doc* next;
} Doc;
typedef struct Armario{
    int ID;
    Doc* P_Documento;
} Arm;

// Função para calcular a distância euclidiana entre dois vetores
double calcularDistanciaEuclidiana(double *vetor1, double *vetor2, int tamanho) {
    double distancia = 0;
    for (int i = 0; i < tamanho; i++) {
        distancia += pow(vetor1[i] - vetor2[i], 2);
    }
    return sqrt(distancia);
}

void inicializarVariaveis(Doc *docs, Arm* armario){
	armario->P_Documento = NULL;
	docs->next = NULL;
	docs->P_Armario = NULL;
	docs->P_Armario = NULL;
}

// Função para ler os documentos a partir de um arquivo
Doc* lerDocumentos() {
	Doc* tmp = (Doc*) malloc(D * sizeof(Doc));
    Doc* documento = (Doc*) malloc(D * sizeof(Doc));
    
    FILE* arquivo = fopen("docs.ini", "r");
    
    fscanf(arquivo, "%d %d %d", &C, &D, &S);
    
    int i, j;
    
    for (i = 0; i <= D; i++) {
    	if(documento!=NULL){
        	tmp[i].pontuacoes = (double*) malloc(S * sizeof(double));
        	fscanf(arquivo, "%d", &tmp[i].ID);
        	for (j = 0; j < S; j++) {
            	fscanf(arquivo, "%lf", &tmp[i].pontuacoes[j]);
        	}
        	documento->next = tmp;
    	}else{
    		tmp[i].pontuacoes = (double*) malloc(S * sizeof(double));
        	fscanf(arquivo, "%d", &tmp[i].ID);
        	for (j = 0; j < S; j++) {
            	fscanf(arquivo, "%lf", &tmp[i].pontuacoes[j]);
        	}
        	documento = tmp;
        	documento->next = NULL;
		}
    }
    fclose(arquivo);
    return documento;
}

// Função para fazer a atribuição inicial dos documentos aos armários
Doc* atribuirDocumentos(Doc* documento, int D, int C) {
	Doc* tmp = (Doc*) malloc(D * sizeof(Doc));
	tmp = documento;
	int i= 0;
    while(tmp->next!=NULL){
        tmp->P_Armario->ID = i % C; // atribuição circular
        i++;
        tmp = tmp->next;
    }
    return tmp;
}

void imprimir(Doc *documentos) {
    Doc* atual = documentos;
    while (atual != NULL) {
        printf("%d ", atual->ID);
        atual = atual->next;
    }
    printf("\n");
}
/*
void ds(){
	    // Aloca memória para os documentos e seus vetores de pontuações de assuntos
    //Documento *documentos = malloc(numDocumentos * sizeof(Documento));
    for (int i = 0; i < numDocumentos; i++) {
        documentos[i].id = i;
        documentos[i].numAssuntos = numAssuntos;
        documentos[i].pontuacoesAssuntos = malloc(numAssuntos * sizeof(double));
        documentos[i].armarioAtual = rand() % numArmarios; // Atribuição inicial aleatória
    }
}*/