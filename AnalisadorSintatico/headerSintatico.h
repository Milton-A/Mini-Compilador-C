#include "../estruturas/estruturas.c"
int NUMCONST;

void program();
void external_declaration();
void declaration_definition();
void declaration_definition1();
void function_definition();
void declaration_specifier();
void storage_class_specifier();
void type_specifier();
void type_qualifier();
void struct_or_union_specifier();
void struct_or_union_specifier1();
void struct_or_union_specifier2();
void struc_or_union();
void struc_declaration();
void specifier_qualifier();
void struc_declaration_list();
void struc_declaration_list1();
void struc_declarator();
void struc_declarator1();
void constant_expression();
void conditional_expression();
void conditional_expression1();
void logical_or_expression();
void logical_or_expression1();
void logical_and_expression();
void logical_and_expression1();
void inclusive_or_expression();
void inclusive_or_expression1();
void exclusive_or_expression();
void exclusive_or_expression1();
void and_expression();
void and_expression1();
void equality_expression();
void equality_expression1();
void relational_expression();
void relational_expression1();
void shift_expression();
void shift_expression1();
void additive_expression();
void additive_expression1();
void multiplicative_expression();
void multiplicative_expression1();
void cast_expression();
void unary_expression();
void unary_expression1();
void postfix_expression();
void postfix_expression1();
void primary_expression();
void constant();
void expression();
void expression1();
void assignment_expression();
void assignment_operator();
void unary_operator();
void type_name();
void parameter_type_list();
void parameter_type_list1();
void parameter_list();
void parameter_list1();
void parameter_declaration();
void parameter_declaration1();
void abstract_declarator();
void abstract_declarator1();
void direct_abstract_declarator();
void direct_abstract_declarator1();
void enum_specifier();
void enum_specifier1();
void enum_specifier2();
void enumeration_list();
void enumeration_list1();
void enumerator();
void enumerator1();
void typede_Name();
void init_declarator();
void init_declarator1();
void initializer();
void initializer1();
void initializer_list();
void initializer_list1();
void declarator();
void pointer();
void direct_declaration();
void direct_declarator1();
void declaration();
void compound_statement();
void statement();
void labeled_statement();
void expression_statement();
void selection_statement();
void selection_statement1();
void iteration_statement();
void jump_statement();